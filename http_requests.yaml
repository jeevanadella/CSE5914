openapi: 3.0.4
info:
  title: Research Paper Analysis API
  version: 1.0.0
  description: |
    An API for a platform that allows users to search, analyze, and compare multiple research papers and their codebases. 
    It integrates with OpenAlex, arXiv, and GitHub, using LLMs for advanced querying and analysis.

tags:
  - name: Health
    description: API Health Status
  - name: Discovery
    description: Search for papers in external sources like arXiv and OpenAlex.
  - name: Papers
    description: Manage papers that have been imported into the system.
  - name: Users
    description: Manage users who curate papers and run analysis.
  - name: Chat
    description: Perform RAG-based Q&A on papers and code.
  - name: Code
    description: Manage codebases linked to papers.

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }

  /discovery/search:
    get:
      tags: [Discovery]
      summary: Search external sources for papers
      description: Queries external APIs like OpenAlex and arXiv to find papers not yet in the system. Supports both keyword and semantic search.
      parameters:
        - in: query
          name: q
          required: true
          schema: { type: string }
          example: '"contrastive learning"'
        - in: query
          name: source
          schema:
            type: string
            enum: [openalex, arxiv]
        - in: query
          name: searchType
          schema:
            type: string
            enum: [keyword, semantic, hybrid]
            default: hybrid
          description: "Type of search - keyword (exact match), semantic (meaning-based), or hybrid (both)"
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: "The page number to retrieve."
        - in: query
          name: perPage
          schema:
            type: integer
            default: 10
            maximum: 100
          description: "The number of papers to retrieve per page."
        - in: query
          name: expandQuery
          schema:
            type: boolean
            default: true
          description: "Whether to expand the query with related terms and synonyms"
        - in: query
          name: minYear
          schema: { type: integer }
          description: "Filter by minimum publication year"
        - in: query
          name: maxYear
          schema: { type: integer }
          description: "Filter by maximum publication year"
        - in: query
          name: minCitations
          schema: { type: integer }
          description: "Filter by minimum citation count"
      responses:
        '200':
          description: A paginated list of discovered papers with enhanced search metadata.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDiscoveredPapers'
                  - type: object
                    properties:
                      searchType:
                        type: string
                        description: "The type of search performed"
                      expandedQuery:
                        type: string
                        description: "The expanded query after processing (if expandQuery=true)"
                      explanation:
                        type: string
                        description: "Explanation of search strategy and results"

  /papers/import:
    post:
      tags: [Papers]
      summary: Import papers from external sources
      description: Triggers an asynchronous ingestion job for one or more papers found via the discovery endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                papers:
                  type: array
                  items:
                    type: object
                    properties:
                      source: { type: string, enum: [openalex, arxiv] }
                      externalId: { type: string }
      responses:
        '202':
          description: Import job accepted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId: { type: string }
                  status: { type: string, example: "queued" }

  /papers/upload:
    post:
      tags: [Papers]
      summary: Upload a PDF for ingestion
      description: Ingests a paper directly from a PDF file for cases where it cannot be found in external sources.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
      responses:
        '202':
          description: Ingestion job accepted.

  /papers/{paperId}:
    get:
      tags: [Papers]
      summary: Get paper details
      parameters:
        - in: path
          name: paperId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Full details of the paper.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaperFull' }

  /papers/{paperId}/code:
    post:
      tags: [Code]
      summary: Link a codebase to a paper
      description: Links a GitHub repository to a specific paper for analysis.
      parameters:
        - in: path
          name: paperId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [repositoryUrl]
              properties:
                repositoryUrl:
                  type: string
                  format: uri
                  example: "https://github.com/facebookresearch/llama"
      responses:
        '202':
          description: Codebase linking job accepted.

    get:
      tags: [Code]
      summary: Get linked codebase details
      description: Retrieves the file structure and other metadata of the codebase linked to a paper.
      parameters:
        - in: path
          name: paperId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Details of the linked codebase.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Codebase' }
  
  /papers/{paperId}/code-links:
    get:
      tags: [Code]
      summary: Find GitHub links in a paper
      description: Scans the full text of an ingested paper to find and extract any mentioned GitHub repository links.
      parameters:
        - in: path
          name: paperId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: A list of GitHub links found in the paper.
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: array
                    items:
                      type: string
                      format: uri
                      example: "https://github.com/facebookresearch/llama"

  /papers/{paperId}/code/content:
    get:
      tags: [Code]
      summary: Get file content from a codebase
      description: Retrieves the content of a specific file from the linked repository.
      parameters:
        - in: path
          name: paperId
          required: true
          schema: { type: string }
        - in: query
          name: filePath
          required: true
          schema: { type: string }
          example: "README.md"
      responses:
        '200':
          description: The content of the file.
          content:
            text/plain:
              schema:
                type: string

  /papers/{paperId}/code/dependencies:
    get:
      tags: [Code]
      summary: Get dependency analysis of the codebase
      description: Parses dependency files like requirements.txt or package.json to identify project dependencies.
      parameters:
        - in: path
          name: paperId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: A list of dependencies.
          content:
            application/json:
              schema:
                type: object
                properties:
                  dependencies:
                    type: array
                    items:
                      type: object
                      properties:
                        name: { type: string }
                        version: { type: string }

  /papers/{paperId}/code/search:
    get:
      tags: [Code]
      summary: Keyword search within the codebase
      description: Performs a keyword search over the code in the linked repository.
      parameters:
        - in: path
          name: paperId
          required: true
          schema: { type: string }
        - in: query
          name: q
          required: true
          schema: { type: string }
          example: "augmentation"
      responses:
        '200':
          description: A list of relevant code snippets matching the keyword.
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/CodeCitation' }

  /papers/{paperId}/code/commits:
    get:
      tags: [Code]
      summary: Get commit history
      description: Retrieves the commit history for a specific file or the entire repository.
      parameters:
        - in: path
          name: paperId
          required: true
          schema: { type: string }
        - in: query
          name: filePath
          schema: { type: string }
          description: "Optional: Specify a file path to get its commit history."
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: "The page number to retrieve."
        - in: query
          name: perPage
          schema:
            type: integer
            default: 10
            maximum: 100
          description: "The number of commits to retrieve per page."
      responses:
        '200':
          description: A paginated list of commits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommits'

  /papers/{paperId}/code/metrics:
    get:
      tags: [Code]
      summary: Get code complexity metrics
      description: Calculates complexity metrics for a specific file (e.g., cyclomatic complexity).
      parameters:
        - in: path
          name: paperId
          required: true
          schema: { type: string }
        - in: query
          name: filePath
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Code complexity metrics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  cyclomaticComplexity: { type: integer }
                  linesOfCode: { type: integer }

  /papers/{paperId}/code/structure:
    get:
      tags: [Code]
      summary: Get code structure
      description: Lists all functions and classes within a given file.
      parameters:
        - in: path
          name: paperId
          required: true
          schema: { type: string }
        - in: query
          name: filePath
          required: true
          schema: { type: string }
      responses:
        '200':
          description: A list of functions and classes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  functions:
                    type: array
                    items: { type: string }
                  classes:
                    type: array
                    items: { type: string }

  /users:
    post:
      tags: [Users]
      summary: Create a new user
      description: Registers a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email]
              properties:
                name:
                  type: string
                  example: "Alice Chen"
                email:
                  type: string
                  format: email
                  example: "alice@example.com"
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    get:
      tags: [Users]
      summary: List all users
      description: Retrieve all registered users.
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      tags: [Users]
      summary: Get user by ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      tags: [Users]
      summary: Delete a user
      description: Deletes a user and all associated data (papers, chat history, etc.).
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully.

  /users/{userId}/papers:
    put:
      tags: [Users]
      summary: Add or remove papers for a user
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paperIds:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: User's paper list updated.

  /chat/qa:
    post:
      tags: [Chat]
      summary: Chat over papers and code
      description: Performs RAG Q&A, optionally scoped to a specific user's selected papers.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [question]
              properties:
                question:
                  type: string
                  example: "How does the code handle data augmentation?"
                userId:
                  type: string
                  description: "Optional: Scope the chat to a specific user's papers."
                searchCode:
                  type: boolean
                  description: "If true, also search linked codebases."
                  default: false
      responses:
        '200':
          description: Answer with citations.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/QAResponse' }

  /papers/compare:
    post:
      tags: [Papers]
      summary: Compare multiple papers on specific dimensions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paperIds:
                  type: array
                  items: { type: string }
                  example: [paper123, paper456]
                dimensions:
                  type: array
                  items:
                    type: string
                    enum: [algorithms, datasets, metrics, results]
                  example: [algorithms, datasets]
      responses:
        '200':
          description: Structured comparison result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComparisonResult'

  /papers/compare/{comparisonId}/summary:
    get:
      tags: [Papers]
      summary: Get a summary of a comparison
      parameters:
        - in: path
          name: comparisonId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Comparison summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QAResponse'

  /papers/align:
    get:
      tags: [Papers]
      summary: Align sections across multiple papers
      parameters:
        - in: query
          name: paperIds
          required: true
          schema:
            type: array
            items: { type: string }
          style: form
          explode: false
          example: [paper123, paper456]
        - in: query
          name: sections
          required: true
          schema:
            type: array
            items: { type: string }
          example: [methods, results]
      responses:
        '200':
          description: Side-by-side aligned sections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaperCitation'

  /papers/questions:
    post:
      tags: [Papers]
      summary: Ask questions across multiple papers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question: { type: string, example: "Which paper achieved the best accuracy on CIFAR-10?" }
                paperIds:
                  type: array
                  items: { type: string }
                  example: [paper123, paper456]
                includeCode: { type: boolean, example: true }
      responses:
        '200':
          description: Answer with supporting citations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QAResponse'

components:
  schemas:
    DiscoveredPaper:
      type: object
      properties:
        source: { type: string, enum: [openalex, arxiv] }
        externalId: { type: string }
        title: { type: string }
        authors: { type: array, items: { type: string } }
        year: { type: integer }
        abstract: { type: string }
        relevanceScore:
          type: number
          format: float
          description: "Semantic relevance score (0-1) for semantic search results"
        matchType:
          type: string
          enum: [keyword, semantic, both]
          description: "How this result matched the query"

    Paper:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        authors: { type: array, items: { type: string } }
        year: { type: integer }
        citationCount: { type: integer }
        codebase: { $ref: '#/components/schemas/CodebaseInfo' }

    PaperFull:
      allOf:
        - $ref: '#/components/schemas/Paper'
        - type: object
          properties:
            abstract: { type: string }
            ingestionStatus: { type: string, enum: [queued, processing, completed, failed] }

    User:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        email: { type: string, format: email }
        paperIds:
          type: array
          items: { type: string }
        createdAt: { type: string, format: date-time }

    PaperCitation:
      type: object
      properties:
        paperId: { type: string }
        passage: { type: string }

    CodeCitation:
      type: object
      properties:
        paperId: { type: string }
        filePath: { type: string }
        snippet: { type: string }

    QAResponse:
      type: object
      properties:
        answer: { type: string }
        citations:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PaperCitation'
              - $ref: '#/components/schemas/CodeCitation'

    CodebaseInfo:
      type: object
      properties:
        repositoryUrl:
          type: string
          format: uri
          description: "The URL of the linked GitHub repository."
        isLinked:
          type: boolean
          default: false
          description: "Indicates if a repository is linked and has been synchronized."

    Codebase:
      allOf:
        - $ref: '#/components/schemas/CodebaseInfo'
        - type: object
          properties:
            fileTree:
              type: array
              items:
                $ref: '#/components/schemas/FileNode'
              description: "The hierarchical file structure of the repository."
            lastSyncedAt:
              type: string
              format: date-time
              description: "The timestamp of the last successful synchronization."

    FileNode:
      type: object
      properties:
        name: { type: string }
        path: { type: string }
        type: { type: string, enum: [file, directory] }
        children:
          type: array
          items:
            $ref: '#/components/schemas/FileNode'
    
    Commit:
      type: object
      properties:
        sha: { type: string }
        message: { type: string }
        author: { type: string }
        date: { type: string, format: date-time }

    PaginatedCommits:
      type: object
      properties:
        totalItems: { type: integer }
        totalPages: { type: integer }
        currentPage: { type: integer }
        items:
          type: array
          items:
            $ref: '#/components/schemas/Commit'

    PaginatedDiscoveredPapers:
      type: object
      properties:
        totalItems: { type: integer }
        totalPages: { type: integer }
        currentPage: { type: integer }
        items:
          type: array
          items:
            $ref: '#/components/schemas/DiscoveredPaper'

    ComparisonResult:
      type: object
      properties:
        comparisonId: { type: string, description: "Unique identifier for the comparison session" }
        table:
          type: array
          description: "Structured comparison table across papers"
          items:
            type: object
            properties:
              dimension: { type: string, description: "The comparison dimension (e.g., algorithms, datasets, metrics, results)" }
              values:
                type: array
                description: "Values for each paper under this dimension"
                items:
                  type: object
                  properties:
                    paperId: { type: string }
                    value: { type: string }